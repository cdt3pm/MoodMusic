/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cs4720.moodmusic;

public final class sp_error {
  public final static sp_error SP_ERROR_OK = new sp_error("SP_ERROR_OK", spotifyJNI.SP_ERROR_OK_get());
  public final static sp_error SP_ERROR_BAD_API_VERSION = new sp_error("SP_ERROR_BAD_API_VERSION", spotifyJNI.SP_ERROR_BAD_API_VERSION_get());
  public final static sp_error SP_ERROR_API_INITIALIZATION_FAILED = new sp_error("SP_ERROR_API_INITIALIZATION_FAILED", spotifyJNI.SP_ERROR_API_INITIALIZATION_FAILED_get());
  public final static sp_error SP_ERROR_TRACK_NOT_PLAYABLE = new sp_error("SP_ERROR_TRACK_NOT_PLAYABLE", spotifyJNI.SP_ERROR_TRACK_NOT_PLAYABLE_get());
  public final static sp_error SP_ERROR_BAD_APPLICATION_KEY = new sp_error("SP_ERROR_BAD_APPLICATION_KEY", spotifyJNI.SP_ERROR_BAD_APPLICATION_KEY_get());
  public final static sp_error SP_ERROR_BAD_USERNAME_OR_PASSWORD = new sp_error("SP_ERROR_BAD_USERNAME_OR_PASSWORD", spotifyJNI.SP_ERROR_BAD_USERNAME_OR_PASSWORD_get());
  public final static sp_error SP_ERROR_USER_BANNED = new sp_error("SP_ERROR_USER_BANNED", spotifyJNI.SP_ERROR_USER_BANNED_get());
  public final static sp_error SP_ERROR_UNABLE_TO_CONTACT_SERVER = new sp_error("SP_ERROR_UNABLE_TO_CONTACT_SERVER", spotifyJNI.SP_ERROR_UNABLE_TO_CONTACT_SERVER_get());
  public final static sp_error SP_ERROR_CLIENT_TOO_OLD = new sp_error("SP_ERROR_CLIENT_TOO_OLD", spotifyJNI.SP_ERROR_CLIENT_TOO_OLD_get());
  public final static sp_error SP_ERROR_OTHER_PERMANENT = new sp_error("SP_ERROR_OTHER_PERMANENT", spotifyJNI.SP_ERROR_OTHER_PERMANENT_get());
  public final static sp_error SP_ERROR_BAD_USER_AGENT = new sp_error("SP_ERROR_BAD_USER_AGENT", spotifyJNI.SP_ERROR_BAD_USER_AGENT_get());
  public final static sp_error SP_ERROR_MISSING_CALLBACK = new sp_error("SP_ERROR_MISSING_CALLBACK", spotifyJNI.SP_ERROR_MISSING_CALLBACK_get());
  public final static sp_error SP_ERROR_INVALID_INDATA = new sp_error("SP_ERROR_INVALID_INDATA", spotifyJNI.SP_ERROR_INVALID_INDATA_get());
  public final static sp_error SP_ERROR_INDEX_OUT_OF_RANGE = new sp_error("SP_ERROR_INDEX_OUT_OF_RANGE", spotifyJNI.SP_ERROR_INDEX_OUT_OF_RANGE_get());
  public final static sp_error SP_ERROR_USER_NEEDS_PREMIUM = new sp_error("SP_ERROR_USER_NEEDS_PREMIUM", spotifyJNI.SP_ERROR_USER_NEEDS_PREMIUM_get());
  public final static sp_error SP_ERROR_OTHER_TRANSIENT = new sp_error("SP_ERROR_OTHER_TRANSIENT", spotifyJNI.SP_ERROR_OTHER_TRANSIENT_get());
  public final static sp_error SP_ERROR_IS_LOADING = new sp_error("SP_ERROR_IS_LOADING", spotifyJNI.SP_ERROR_IS_LOADING_get());
  public final static sp_error SP_ERROR_NO_STREAM_AVAILABLE = new sp_error("SP_ERROR_NO_STREAM_AVAILABLE", spotifyJNI.SP_ERROR_NO_STREAM_AVAILABLE_get());
  public final static sp_error SP_ERROR_PERMISSION_DENIED = new sp_error("SP_ERROR_PERMISSION_DENIED", spotifyJNI.SP_ERROR_PERMISSION_DENIED_get());
  public final static sp_error SP_ERROR_INBOX_IS_FULL = new sp_error("SP_ERROR_INBOX_IS_FULL", spotifyJNI.SP_ERROR_INBOX_IS_FULL_get());
  public final static sp_error SP_ERROR_NO_CACHE = new sp_error("SP_ERROR_NO_CACHE", spotifyJNI.SP_ERROR_NO_CACHE_get());
  public final static sp_error SP_ERROR_NO_SUCH_USER = new sp_error("SP_ERROR_NO_SUCH_USER", spotifyJNI.SP_ERROR_NO_SUCH_USER_get());
  public final static sp_error SP_ERROR_NO_CREDENTIALS = new sp_error("SP_ERROR_NO_CREDENTIALS", spotifyJNI.SP_ERROR_NO_CREDENTIALS_get());
  public final static sp_error SP_ERROR_NETWORK_DISABLED = new sp_error("SP_ERROR_NETWORK_DISABLED", spotifyJNI.SP_ERROR_NETWORK_DISABLED_get());
  public final static sp_error SP_ERROR_INVALID_DEVICE_ID = new sp_error("SP_ERROR_INVALID_DEVICE_ID", spotifyJNI.SP_ERROR_INVALID_DEVICE_ID_get());
  public final static sp_error SP_ERROR_CANT_OPEN_TRACE_FILE = new sp_error("SP_ERROR_CANT_OPEN_TRACE_FILE", spotifyJNI.SP_ERROR_CANT_OPEN_TRACE_FILE_get());
  public final static sp_error SP_ERROR_APPLICATION_BANNED = new sp_error("SP_ERROR_APPLICATION_BANNED", spotifyJNI.SP_ERROR_APPLICATION_BANNED_get());
  public final static sp_error SP_ERROR_OFFLINE_TOO_MANY_TRACKS = new sp_error("SP_ERROR_OFFLINE_TOO_MANY_TRACKS", spotifyJNI.SP_ERROR_OFFLINE_TOO_MANY_TRACKS_get());
  public final static sp_error SP_ERROR_OFFLINE_DISK_CACHE = new sp_error("SP_ERROR_OFFLINE_DISK_CACHE", spotifyJNI.SP_ERROR_OFFLINE_DISK_CACHE_get());
  public final static sp_error SP_ERROR_OFFLINE_EXPIRED = new sp_error("SP_ERROR_OFFLINE_EXPIRED", spotifyJNI.SP_ERROR_OFFLINE_EXPIRED_get());
  public final static sp_error SP_ERROR_OFFLINE_NOT_ALLOWED = new sp_error("SP_ERROR_OFFLINE_NOT_ALLOWED", spotifyJNI.SP_ERROR_OFFLINE_NOT_ALLOWED_get());
  public final static sp_error SP_ERROR_OFFLINE_LICENSE_LOST = new sp_error("SP_ERROR_OFFLINE_LICENSE_LOST", spotifyJNI.SP_ERROR_OFFLINE_LICENSE_LOST_get());
  public final static sp_error SP_ERROR_OFFLINE_LICENSE_ERROR = new sp_error("SP_ERROR_OFFLINE_LICENSE_ERROR", spotifyJNI.SP_ERROR_OFFLINE_LICENSE_ERROR_get());
  public final static sp_error SP_ERROR_LASTFM_AUTH_ERROR = new sp_error("SP_ERROR_LASTFM_AUTH_ERROR", spotifyJNI.SP_ERROR_LASTFM_AUTH_ERROR_get());
  public final static sp_error SP_ERROR_INVALID_ARGUMENT = new sp_error("SP_ERROR_INVALID_ARGUMENT", spotifyJNI.SP_ERROR_INVALID_ARGUMENT_get());
  public final static sp_error SP_ERROR_SYSTEM_FAILURE = new sp_error("SP_ERROR_SYSTEM_FAILURE", spotifyJNI.SP_ERROR_SYSTEM_FAILURE_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static sp_error swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + sp_error.class + " with value " + swigValue);
  }

  private sp_error(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private sp_error(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private sp_error(String swigName, sp_error swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static sp_error[] swigValues = { SP_ERROR_OK, SP_ERROR_BAD_API_VERSION, SP_ERROR_API_INITIALIZATION_FAILED, SP_ERROR_TRACK_NOT_PLAYABLE, SP_ERROR_BAD_APPLICATION_KEY, SP_ERROR_BAD_USERNAME_OR_PASSWORD, SP_ERROR_USER_BANNED, SP_ERROR_UNABLE_TO_CONTACT_SERVER, SP_ERROR_CLIENT_TOO_OLD, SP_ERROR_OTHER_PERMANENT, SP_ERROR_BAD_USER_AGENT, SP_ERROR_MISSING_CALLBACK, SP_ERROR_INVALID_INDATA, SP_ERROR_INDEX_OUT_OF_RANGE, SP_ERROR_USER_NEEDS_PREMIUM, SP_ERROR_OTHER_TRANSIENT, SP_ERROR_IS_LOADING, SP_ERROR_NO_STREAM_AVAILABLE, SP_ERROR_PERMISSION_DENIED, SP_ERROR_INBOX_IS_FULL, SP_ERROR_NO_CACHE, SP_ERROR_NO_SUCH_USER, SP_ERROR_NO_CREDENTIALS, SP_ERROR_NETWORK_DISABLED, SP_ERROR_INVALID_DEVICE_ID, SP_ERROR_CANT_OPEN_TRACE_FILE, SP_ERROR_APPLICATION_BANNED, SP_ERROR_OFFLINE_TOO_MANY_TRACKS, SP_ERROR_OFFLINE_DISK_CACHE, SP_ERROR_OFFLINE_EXPIRED, SP_ERROR_OFFLINE_NOT_ALLOWED, SP_ERROR_OFFLINE_LICENSE_LOST, SP_ERROR_OFFLINE_LICENSE_ERROR, SP_ERROR_LASTFM_AUTH_ERROR, SP_ERROR_INVALID_ARGUMENT, SP_ERROR_SYSTEM_FAILURE };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

