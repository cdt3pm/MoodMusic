/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cs4720.moodmusic;

public class spotify implements spotifyConstants {
  public static String sp_error_message(sp_error error) {
    return spotifyJNI.sp_error_message(error.swigValue());
  }

  public static sp_error sp_session_create(sp_session_config config, SWIGTYPE_p_p_sp_session sess) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_create(sp_session_config.getCPtr(config), config, SWIGTYPE_p_p_sp_session.getCPtr(sess)));
  }

  public static sp_error sp_session_release(SWIGTYPE_p_sp_session sess) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_release(SWIGTYPE_p_sp_session.getCPtr(sess)));
  }

  public static sp_error sp_session_login(SWIGTYPE_p_sp_session session, String username, String password, boolean remember_me, String blob) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_login(SWIGTYPE_p_sp_session.getCPtr(session), username, password, remember_me, blob));
  }

  public static sp_error sp_session_relogin(SWIGTYPE_p_sp_session session) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_relogin(SWIGTYPE_p_sp_session.getCPtr(session)));
  }

  public static int sp_session_remembered_user(SWIGTYPE_p_sp_session session, String buffer, long buffer_size) {
    return spotifyJNI.sp_session_remembered_user(SWIGTYPE_p_sp_session.getCPtr(session), buffer, buffer_size);
  }

  public static String sp_session_user_name(SWIGTYPE_p_sp_session session) {
    return spotifyJNI.sp_session_user_name(SWIGTYPE_p_sp_session.getCPtr(session));
  }

  public static sp_error sp_session_forget_me(SWIGTYPE_p_sp_session session) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_forget_me(SWIGTYPE_p_sp_session.getCPtr(session)));
  }

  public static SWIGTYPE_p_sp_user sp_session_user(SWIGTYPE_p_sp_session session) {
    long cPtr = spotifyJNI.sp_session_user(SWIGTYPE_p_sp_session.getCPtr(session));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_user(cPtr, false);
  }

  public static sp_error sp_session_logout(SWIGTYPE_p_sp_session session) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_logout(SWIGTYPE_p_sp_session.getCPtr(session)));
  }

  public static sp_error sp_session_flush_caches(SWIGTYPE_p_sp_session session) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_flush_caches(SWIGTYPE_p_sp_session.getCPtr(session)));
  }

  public static sp_connectionstate sp_session_connectionstate(SWIGTYPE_p_sp_session session) {
    return sp_connectionstate.swigToEnum(spotifyJNI.sp_session_connectionstate(SWIGTYPE_p_sp_session.getCPtr(session)));
  }

  public static SWIGTYPE_p_void sp_session_userdata(SWIGTYPE_p_sp_session session) {
    long cPtr = spotifyJNI.sp_session_userdata(SWIGTYPE_p_sp_session.getCPtr(session));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static sp_error sp_session_set_cache_size(SWIGTYPE_p_sp_session session, long size) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_set_cache_size(SWIGTYPE_p_sp_session.getCPtr(session), size));
  }

  public static sp_error sp_session_process_events(SWIGTYPE_p_sp_session session, SWIGTYPE_p_int next_timeout) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_process_events(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_int.getCPtr(next_timeout)));
  }

  public static sp_error sp_session_player_load(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_track track) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_player_load(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_track.getCPtr(track)));
  }

  public static sp_error sp_session_player_seek(SWIGTYPE_p_sp_session session, int offset) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_player_seek(SWIGTYPE_p_sp_session.getCPtr(session), offset));
  }

  public static sp_error sp_session_player_play(SWIGTYPE_p_sp_session session, boolean play) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_player_play(SWIGTYPE_p_sp_session.getCPtr(session), play));
  }

  public static sp_error sp_session_player_unload(SWIGTYPE_p_sp_session session) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_player_unload(SWIGTYPE_p_sp_session.getCPtr(session)));
  }

  public static sp_error sp_session_player_prefetch(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_track track) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_player_prefetch(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_track.getCPtr(track)));
  }

  public static SWIGTYPE_p_sp_playlistcontainer sp_session_playlistcontainer(SWIGTYPE_p_sp_session session) {
    long cPtr = spotifyJNI.sp_session_playlistcontainer(SWIGTYPE_p_sp_session.getCPtr(session));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlistcontainer(cPtr, false);
  }

  public static SWIGTYPE_p_sp_playlist sp_session_inbox_create(SWIGTYPE_p_sp_session session) {
    long cPtr = spotifyJNI.sp_session_inbox_create(SWIGTYPE_p_sp_session.getCPtr(session));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlist(cPtr, false);
  }

  public static SWIGTYPE_p_sp_playlist sp_session_starred_create(SWIGTYPE_p_sp_session session) {
    long cPtr = spotifyJNI.sp_session_starred_create(SWIGTYPE_p_sp_session.getCPtr(session));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlist(cPtr, false);
  }

  public static SWIGTYPE_p_sp_playlist sp_session_starred_for_user_create(SWIGTYPE_p_sp_session session, String canonical_username) {
    long cPtr = spotifyJNI.sp_session_starred_for_user_create(SWIGTYPE_p_sp_session.getCPtr(session), canonical_username);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlist(cPtr, false);
  }

  public static SWIGTYPE_p_sp_playlistcontainer sp_session_publishedcontainer_for_user_create(SWIGTYPE_p_sp_session session, String canonical_username) {
    long cPtr = spotifyJNI.sp_session_publishedcontainer_for_user_create(SWIGTYPE_p_sp_session.getCPtr(session), canonical_username);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlistcontainer(cPtr, false);
  }

  public static sp_error sp_session_preferred_bitrate(SWIGTYPE_p_sp_session session, sp_bitrate bitrate) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_preferred_bitrate(SWIGTYPE_p_sp_session.getCPtr(session), bitrate.swigValue()));
  }

  public static sp_error sp_session_preferred_offline_bitrate(SWIGTYPE_p_sp_session session, sp_bitrate bitrate, boolean allow_resync) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_preferred_offline_bitrate(SWIGTYPE_p_sp_session.getCPtr(session), bitrate.swigValue(), allow_resync));
  }

  public static boolean sp_session_get_volume_normalization(SWIGTYPE_p_sp_session session) {
    return spotifyJNI.sp_session_get_volume_normalization(SWIGTYPE_p_sp_session.getCPtr(session));
  }

  public static sp_error sp_session_set_volume_normalization(SWIGTYPE_p_sp_session session, boolean on) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_set_volume_normalization(SWIGTYPE_p_sp_session.getCPtr(session), on));
  }

  public static sp_error sp_session_set_private_session(SWIGTYPE_p_sp_session session, boolean enabled) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_set_private_session(SWIGTYPE_p_sp_session.getCPtr(session), enabled));
  }

  public static boolean sp_session_is_private_session(SWIGTYPE_p_sp_session session) {
    return spotifyJNI.sp_session_is_private_session(SWIGTYPE_p_sp_session.getCPtr(session));
  }

  public static sp_error sp_session_set_scrobbling(SWIGTYPE_p_sp_session session, sp_social_provider provider, sp_scrobbling_state state) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_set_scrobbling(SWIGTYPE_p_sp_session.getCPtr(session), provider.swigValue(), state.swigValue()));
  }

  public static sp_error sp_session_is_scrobbling(SWIGTYPE_p_sp_session session, sp_social_provider provider, SWIGTYPE_p_sp_scrobbling_state state) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_is_scrobbling(SWIGTYPE_p_sp_session.getCPtr(session), provider.swigValue(), SWIGTYPE_p_sp_scrobbling_state.getCPtr(state)));
  }

  public static sp_error sp_session_is_scrobbling_possible(SWIGTYPE_p_sp_session session, sp_social_provider provider, SWIGTYPE_p_bool out) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_is_scrobbling_possible(SWIGTYPE_p_sp_session.getCPtr(session), provider.swigValue(), SWIGTYPE_p_bool.getCPtr(out)));
  }

  public static sp_error sp_session_set_social_credentials(SWIGTYPE_p_sp_session session, sp_social_provider provider, String username, String password) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_set_social_credentials(SWIGTYPE_p_sp_session.getCPtr(session), provider.swigValue(), username, password));
  }

  public static sp_error sp_session_set_connection_type(SWIGTYPE_p_sp_session session, sp_connection_type type) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_set_connection_type(SWIGTYPE_p_sp_session.getCPtr(session), type.swigValue()));
  }

  public static sp_error sp_session_set_connection_rules(SWIGTYPE_p_sp_session session, sp_connection_rules rules) {
    return sp_error.swigToEnum(spotifyJNI.sp_session_set_connection_rules(SWIGTYPE_p_sp_session.getCPtr(session), rules.swigValue()));
  }

  public static int sp_offline_tracks_to_sync(SWIGTYPE_p_sp_session session) {
    return spotifyJNI.sp_offline_tracks_to_sync(SWIGTYPE_p_sp_session.getCPtr(session));
  }

  public static int sp_offline_num_playlists(SWIGTYPE_p_sp_session session) {
    return spotifyJNI.sp_offline_num_playlists(SWIGTYPE_p_sp_session.getCPtr(session));
  }

  public static boolean sp_offline_sync_get_status(SWIGTYPE_p_sp_session session, sp_offline_sync_status status) {
    return spotifyJNI.sp_offline_sync_get_status(SWIGTYPE_p_sp_session.getCPtr(session), sp_offline_sync_status.getCPtr(status), status);
  }

  public static int sp_offline_time_left(SWIGTYPE_p_sp_session session) {
    return spotifyJNI.sp_offline_time_left(SWIGTYPE_p_sp_session.getCPtr(session));
  }

  public static int sp_session_user_country(SWIGTYPE_p_sp_session session) {
    return spotifyJNI.sp_session_user_country(SWIGTYPE_p_sp_session.getCPtr(session));
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_string(String link) {
    long cPtr = spotifyJNI.sp_link_create_from_string(link);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_track(SWIGTYPE_p_sp_track track, int offset) {
    long cPtr = spotifyJNI.sp_link_create_from_track(SWIGTYPE_p_sp_track.getCPtr(track), offset);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_album(SWIGTYPE_p_sp_album album) {
    long cPtr = spotifyJNI.sp_link_create_from_album(SWIGTYPE_p_sp_album.getCPtr(album));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_album_cover(SWIGTYPE_p_sp_album album, sp_image_size size) {
    long cPtr = spotifyJNI.sp_link_create_from_album_cover(SWIGTYPE_p_sp_album.getCPtr(album), size.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_artist(SWIGTYPE_p_sp_artist artist) {
    long cPtr = spotifyJNI.sp_link_create_from_artist(SWIGTYPE_p_sp_artist.getCPtr(artist));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_artist_portrait(SWIGTYPE_p_sp_artist artist, sp_image_size size) {
    long cPtr = spotifyJNI.sp_link_create_from_artist_portrait(SWIGTYPE_p_sp_artist.getCPtr(artist), size.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_artistbrowse_portrait(SWIGTYPE_p_sp_artistbrowse arb, int index) {
    long cPtr = spotifyJNI.sp_link_create_from_artistbrowse_portrait(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_search(SWIGTYPE_p_sp_search search) {
    long cPtr = spotifyJNI.sp_link_create_from_search(SWIGTYPE_p_sp_search.getCPtr(search));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_playlist(SWIGTYPE_p_sp_playlist playlist) {
    long cPtr = spotifyJNI.sp_link_create_from_playlist(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_user(SWIGTYPE_p_sp_user user) {
    long cPtr = spotifyJNI.sp_link_create_from_user(SWIGTYPE_p_sp_user.getCPtr(user));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static SWIGTYPE_p_sp_link sp_link_create_from_image(SWIGTYPE_p_sp_image image) {
    long cPtr = spotifyJNI.sp_link_create_from_image(SWIGTYPE_p_sp_image.getCPtr(image));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_link(cPtr, false);
  }

  public static int sp_link_as_string(SWIGTYPE_p_sp_link link, String buffer, int buffer_size) {
    return spotifyJNI.sp_link_as_string(SWIGTYPE_p_sp_link.getCPtr(link), buffer, buffer_size);
  }

  public static sp_linktype sp_link_type(SWIGTYPE_p_sp_link link) {
    return sp_linktype.swigToEnum(spotifyJNI.sp_link_type(SWIGTYPE_p_sp_link.getCPtr(link)));
  }

  public static SWIGTYPE_p_sp_track sp_link_as_track(SWIGTYPE_p_sp_link link) {
    long cPtr = spotifyJNI.sp_link_as_track(SWIGTYPE_p_sp_link.getCPtr(link));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static SWIGTYPE_p_sp_track sp_link_as_track_and_offset(SWIGTYPE_p_sp_link link, SWIGTYPE_p_int offset) {
    long cPtr = spotifyJNI.sp_link_as_track_and_offset(SWIGTYPE_p_sp_link.getCPtr(link), SWIGTYPE_p_int.getCPtr(offset));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static SWIGTYPE_p_sp_album sp_link_as_album(SWIGTYPE_p_sp_link link) {
    long cPtr = spotifyJNI.sp_link_as_album(SWIGTYPE_p_sp_link.getCPtr(link));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_album(cPtr, false);
  }

  public static SWIGTYPE_p_sp_artist sp_link_as_artist(SWIGTYPE_p_sp_link link) {
    long cPtr = spotifyJNI.sp_link_as_artist(SWIGTYPE_p_sp_link.getCPtr(link));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_artist(cPtr, false);
  }

  public static SWIGTYPE_p_sp_user sp_link_as_user(SWIGTYPE_p_sp_link link) {
    long cPtr = spotifyJNI.sp_link_as_user(SWIGTYPE_p_sp_link.getCPtr(link));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_user(cPtr, false);
  }

  public static sp_error sp_link_add_ref(SWIGTYPE_p_sp_link link) {
    return sp_error.swigToEnum(spotifyJNI.sp_link_add_ref(SWIGTYPE_p_sp_link.getCPtr(link)));
  }

  public static sp_error sp_link_release(SWIGTYPE_p_sp_link link) {
    return sp_error.swigToEnum(spotifyJNI.sp_link_release(SWIGTYPE_p_sp_link.getCPtr(link)));
  }

  public static boolean sp_track_is_loaded(SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_is_loaded(SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static sp_error sp_track_error(SWIGTYPE_p_sp_track track) {
    return sp_error.swigToEnum(spotifyJNI.sp_track_error(SWIGTYPE_p_sp_track.getCPtr(track)));
  }

  public static sp_track_offline_status sp_track_offline_get_status(SWIGTYPE_p_sp_track track) {
    return sp_track_offline_status.swigToEnum(spotifyJNI.sp_track_offline_get_status(SWIGTYPE_p_sp_track.getCPtr(track)));
  }

  public static sp_track_availability sp_track_get_availability(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_track track) {
    return sp_track_availability.swigToEnum(spotifyJNI.sp_track_get_availability(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_track.getCPtr(track)));
  }

  public static boolean sp_track_is_local(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_is_local(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static boolean sp_track_is_autolinked(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_is_autolinked(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static SWIGTYPE_p_sp_track sp_track_get_playable(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_track track) {
    long cPtr = spotifyJNI.sp_track_get_playable(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_track.getCPtr(track));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static boolean sp_track_is_placeholder(SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_is_placeholder(SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static boolean sp_track_is_starred(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_is_starred(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static sp_error sp_track_set_starred(SWIGTYPE_p_sp_session session, SWIGTYPE_p_p_sp_track tracks, int num_tracks, boolean star) {
    return sp_error.swigToEnum(spotifyJNI.sp_track_set_starred(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_p_sp_track.getCPtr(tracks), num_tracks, star));
  }

  public static int sp_track_num_artists(SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_num_artists(SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static SWIGTYPE_p_sp_artist sp_track_artist(SWIGTYPE_p_sp_track track, int index) {
    long cPtr = spotifyJNI.sp_track_artist(SWIGTYPE_p_sp_track.getCPtr(track), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_artist(cPtr, false);
  }

  public static SWIGTYPE_p_sp_album sp_track_album(SWIGTYPE_p_sp_track track) {
    long cPtr = spotifyJNI.sp_track_album(SWIGTYPE_p_sp_track.getCPtr(track));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_album(cPtr, false);
  }

  public static String sp_track_name(SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_name(SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static int sp_track_duration(SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_duration(SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static int sp_track_popularity(SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_popularity(SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static int sp_track_disc(SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_disc(SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static int sp_track_index(SWIGTYPE_p_sp_track track) {
    return spotifyJNI.sp_track_index(SWIGTYPE_p_sp_track.getCPtr(track));
  }

  public static SWIGTYPE_p_sp_track sp_localtrack_create(String artist, String title, String album, int length) {
    long cPtr = spotifyJNI.sp_localtrack_create(artist, title, album, length);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static sp_error sp_track_add_ref(SWIGTYPE_p_sp_track track) {
    return sp_error.swigToEnum(spotifyJNI.sp_track_add_ref(SWIGTYPE_p_sp_track.getCPtr(track)));
  }

  public static sp_error sp_track_release(SWIGTYPE_p_sp_track track) {
    return sp_error.swigToEnum(spotifyJNI.sp_track_release(SWIGTYPE_p_sp_track.getCPtr(track)));
  }

  public static boolean sp_album_is_loaded(SWIGTYPE_p_sp_album album) {
    return spotifyJNI.sp_album_is_loaded(SWIGTYPE_p_sp_album.getCPtr(album));
  }

  public static boolean sp_album_is_available(SWIGTYPE_p_sp_album album) {
    return spotifyJNI.sp_album_is_available(SWIGTYPE_p_sp_album.getCPtr(album));
  }

  public static SWIGTYPE_p_sp_artist sp_album_artist(SWIGTYPE_p_sp_album album) {
    long cPtr = spotifyJNI.sp_album_artist(SWIGTYPE_p_sp_album.getCPtr(album));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_artist(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_char sp_album_cover(SWIGTYPE_p_sp_album album, sp_image_size size) {
    long cPtr = spotifyJNI.sp_album_cover(SWIGTYPE_p_sp_album.getCPtr(album), size.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static String sp_album_name(SWIGTYPE_p_sp_album album) {
    return spotifyJNI.sp_album_name(SWIGTYPE_p_sp_album.getCPtr(album));
  }

  public static int sp_album_year(SWIGTYPE_p_sp_album album) {
    return spotifyJNI.sp_album_year(SWIGTYPE_p_sp_album.getCPtr(album));
  }

  public static sp_albumtype sp_album_type(SWIGTYPE_p_sp_album album) {
    return sp_albumtype.swigToEnum(spotifyJNI.sp_album_type(SWIGTYPE_p_sp_album.getCPtr(album)));
  }

  public static sp_error sp_album_add_ref(SWIGTYPE_p_sp_album album) {
    return sp_error.swigToEnum(spotifyJNI.sp_album_add_ref(SWIGTYPE_p_sp_album.getCPtr(album)));
  }

  public static sp_error sp_album_release(SWIGTYPE_p_sp_album album) {
    return sp_error.swigToEnum(spotifyJNI.sp_album_release(SWIGTYPE_p_sp_album.getCPtr(album)));
  }

  public static String sp_artist_name(SWIGTYPE_p_sp_artist artist) {
    return spotifyJNI.sp_artist_name(SWIGTYPE_p_sp_artist.getCPtr(artist));
  }

  public static boolean sp_artist_is_loaded(SWIGTYPE_p_sp_artist artist) {
    return spotifyJNI.sp_artist_is_loaded(SWIGTYPE_p_sp_artist.getCPtr(artist));
  }

  public static SWIGTYPE_p_unsigned_char sp_artist_portrait(SWIGTYPE_p_sp_artist artist, sp_image_size size) {
    long cPtr = spotifyJNI.sp_artist_portrait(SWIGTYPE_p_sp_artist.getCPtr(artist), size.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static sp_error sp_artist_add_ref(SWIGTYPE_p_sp_artist artist) {
    return sp_error.swigToEnum(spotifyJNI.sp_artist_add_ref(SWIGTYPE_p_sp_artist.getCPtr(artist)));
  }

  public static sp_error sp_artist_release(SWIGTYPE_p_sp_artist artist) {
    return sp_error.swigToEnum(spotifyJNI.sp_artist_release(SWIGTYPE_p_sp_artist.getCPtr(artist)));
  }

  public static SWIGTYPE_p_sp_albumbrowse sp_albumbrowse_create(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_album album, SWIGTYPE_p_f_p_struct_sp_albumbrowse_p_void__void callback, SWIGTYPE_p_void userdata) {
    long cPtr = spotifyJNI.sp_albumbrowse_create(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_album.getCPtr(album), SWIGTYPE_p_f_p_struct_sp_albumbrowse_p_void__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(userdata));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_albumbrowse(cPtr, false);
  }

  public static boolean sp_albumbrowse_is_loaded(SWIGTYPE_p_sp_albumbrowse alb) {
    return spotifyJNI.sp_albumbrowse_is_loaded(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb));
  }

  public static sp_error sp_albumbrowse_error(SWIGTYPE_p_sp_albumbrowse alb) {
    return sp_error.swigToEnum(spotifyJNI.sp_albumbrowse_error(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb)));
  }

  public static SWIGTYPE_p_sp_album sp_albumbrowse_album(SWIGTYPE_p_sp_albumbrowse alb) {
    long cPtr = spotifyJNI.sp_albumbrowse_album(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_album(cPtr, false);
  }

  public static SWIGTYPE_p_sp_artist sp_albumbrowse_artist(SWIGTYPE_p_sp_albumbrowse alb) {
    long cPtr = spotifyJNI.sp_albumbrowse_artist(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_artist(cPtr, false);
  }

  public static int sp_albumbrowse_num_copyrights(SWIGTYPE_p_sp_albumbrowse alb) {
    return spotifyJNI.sp_albumbrowse_num_copyrights(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb));
  }

  public static String sp_albumbrowse_copyright(SWIGTYPE_p_sp_albumbrowse alb, int index) {
    return spotifyJNI.sp_albumbrowse_copyright(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb), index);
  }

  public static int sp_albumbrowse_num_tracks(SWIGTYPE_p_sp_albumbrowse alb) {
    return spotifyJNI.sp_albumbrowse_num_tracks(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb));
  }

  public static SWIGTYPE_p_sp_track sp_albumbrowse_track(SWIGTYPE_p_sp_albumbrowse alb, int index) {
    long cPtr = spotifyJNI.sp_albumbrowse_track(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static String sp_albumbrowse_review(SWIGTYPE_p_sp_albumbrowse alb) {
    return spotifyJNI.sp_albumbrowse_review(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb));
  }

  public static int sp_albumbrowse_backend_request_duration(SWIGTYPE_p_sp_albumbrowse alb) {
    return spotifyJNI.sp_albumbrowse_backend_request_duration(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb));
  }

  public static sp_error sp_albumbrowse_add_ref(SWIGTYPE_p_sp_albumbrowse alb) {
    return sp_error.swigToEnum(spotifyJNI.sp_albumbrowse_add_ref(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb)));
  }

  public static sp_error sp_albumbrowse_release(SWIGTYPE_p_sp_albumbrowse alb) {
    return sp_error.swigToEnum(spotifyJNI.sp_albumbrowse_release(SWIGTYPE_p_sp_albumbrowse.getCPtr(alb)));
  }

  public static SWIGTYPE_p_sp_artistbrowse sp_artistbrowse_create(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_artist artist, sp_artistbrowse_type type, SWIGTYPE_p_f_p_struct_sp_artistbrowse_p_void__void callback, SWIGTYPE_p_void userdata) {
    long cPtr = spotifyJNI.sp_artistbrowse_create(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_artist.getCPtr(artist), type.swigValue(), SWIGTYPE_p_f_p_struct_sp_artistbrowse_p_void__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(userdata));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_artistbrowse(cPtr, false);
  }

  public static boolean sp_artistbrowse_is_loaded(SWIGTYPE_p_sp_artistbrowse arb) {
    return spotifyJNI.sp_artistbrowse_is_loaded(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb));
  }

  public static sp_error sp_artistbrowse_error(SWIGTYPE_p_sp_artistbrowse arb) {
    return sp_error.swigToEnum(spotifyJNI.sp_artistbrowse_error(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb)));
  }

  public static SWIGTYPE_p_sp_artist sp_artistbrowse_artist(SWIGTYPE_p_sp_artistbrowse arb) {
    long cPtr = spotifyJNI.sp_artistbrowse_artist(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_artist(cPtr, false);
  }

  public static int sp_artistbrowse_num_portraits(SWIGTYPE_p_sp_artistbrowse arb) {
    return spotifyJNI.sp_artistbrowse_num_portraits(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb));
  }

  public static SWIGTYPE_p_unsigned_char sp_artistbrowse_portrait(SWIGTYPE_p_sp_artistbrowse arb, int index) {
    long cPtr = spotifyJNI.sp_artistbrowse_portrait(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static int sp_artistbrowse_num_tracks(SWIGTYPE_p_sp_artistbrowse arb) {
    return spotifyJNI.sp_artistbrowse_num_tracks(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb));
  }

  public static SWIGTYPE_p_sp_track sp_artistbrowse_track(SWIGTYPE_p_sp_artistbrowse arb, int index) {
    long cPtr = spotifyJNI.sp_artistbrowse_track(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static int sp_artistbrowse_num_tophit_tracks(SWIGTYPE_p_sp_artistbrowse arb) {
    return spotifyJNI.sp_artistbrowse_num_tophit_tracks(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb));
  }

  public static SWIGTYPE_p_sp_track sp_artistbrowse_tophit_track(SWIGTYPE_p_sp_artistbrowse arb, int index) {
    long cPtr = spotifyJNI.sp_artistbrowse_tophit_track(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static int sp_artistbrowse_num_albums(SWIGTYPE_p_sp_artistbrowse arb) {
    return spotifyJNI.sp_artistbrowse_num_albums(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb));
  }

  public static SWIGTYPE_p_sp_album sp_artistbrowse_album(SWIGTYPE_p_sp_artistbrowse arb, int index) {
    long cPtr = spotifyJNI.sp_artistbrowse_album(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_album(cPtr, false);
  }

  public static int sp_artistbrowse_num_similar_artists(SWIGTYPE_p_sp_artistbrowse arb) {
    return spotifyJNI.sp_artistbrowse_num_similar_artists(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb));
  }

  public static SWIGTYPE_p_sp_artist sp_artistbrowse_similar_artist(SWIGTYPE_p_sp_artistbrowse arb, int index) {
    long cPtr = spotifyJNI.sp_artistbrowse_similar_artist(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_artist(cPtr, false);
  }

  public static String sp_artistbrowse_biography(SWIGTYPE_p_sp_artistbrowse arb) {
    return spotifyJNI.sp_artistbrowse_biography(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb));
  }

  public static int sp_artistbrowse_backend_request_duration(SWIGTYPE_p_sp_artistbrowse arb) {
    return spotifyJNI.sp_artistbrowse_backend_request_duration(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb));
  }

  public static sp_error sp_artistbrowse_add_ref(SWIGTYPE_p_sp_artistbrowse arb) {
    return sp_error.swigToEnum(spotifyJNI.sp_artistbrowse_add_ref(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb)));
  }

  public static sp_error sp_artistbrowse_release(SWIGTYPE_p_sp_artistbrowse arb) {
    return sp_error.swigToEnum(spotifyJNI.sp_artistbrowse_release(SWIGTYPE_p_sp_artistbrowse.getCPtr(arb)));
  }

  public static SWIGTYPE_p_sp_image sp_image_create(SWIGTYPE_p_sp_session session, SWIGTYPE_p_unsigned_char image_id) {
    long cPtr = spotifyJNI.sp_image_create(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_unsigned_char.getCPtr(image_id));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_image(cPtr, false);
  }

  public static SWIGTYPE_p_sp_image sp_image_create_from_link(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_link l) {
    long cPtr = spotifyJNI.sp_image_create_from_link(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_link.getCPtr(l));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_image(cPtr, false);
  }

  public static sp_error sp_image_add_load_callback(SWIGTYPE_p_sp_image image, SWIGTYPE_p_f_p_struct_sp_image_p_void__void callback, SWIGTYPE_p_void userdata) {
    return sp_error.swigToEnum(spotifyJNI.sp_image_add_load_callback(SWIGTYPE_p_sp_image.getCPtr(image), SWIGTYPE_p_f_p_struct_sp_image_p_void__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(userdata)));
  }

  public static sp_error sp_image_remove_load_callback(SWIGTYPE_p_sp_image image, SWIGTYPE_p_f_p_struct_sp_image_p_void__void callback, SWIGTYPE_p_void userdata) {
    return sp_error.swigToEnum(spotifyJNI.sp_image_remove_load_callback(SWIGTYPE_p_sp_image.getCPtr(image), SWIGTYPE_p_f_p_struct_sp_image_p_void__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(userdata)));
  }

  public static boolean sp_image_is_loaded(SWIGTYPE_p_sp_image image) {
    return spotifyJNI.sp_image_is_loaded(SWIGTYPE_p_sp_image.getCPtr(image));
  }

  public static sp_error sp_image_error(SWIGTYPE_p_sp_image image) {
    return sp_error.swigToEnum(spotifyJNI.sp_image_error(SWIGTYPE_p_sp_image.getCPtr(image)));
  }

  public static sp_imageformat sp_image_format(SWIGTYPE_p_sp_image image) {
    return sp_imageformat.swigToEnum(spotifyJNI.sp_image_format(SWIGTYPE_p_sp_image.getCPtr(image)));
  }

  public static SWIGTYPE_p_void sp_image_data(SWIGTYPE_p_sp_image image, SWIGTYPE_p_size_t data_size) {
    long cPtr = spotifyJNI.sp_image_data(SWIGTYPE_p_sp_image.getCPtr(image), SWIGTYPE_p_size_t.getCPtr(data_size));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_char sp_image_image_id(SWIGTYPE_p_sp_image image) {
    long cPtr = spotifyJNI.sp_image_image_id(SWIGTYPE_p_sp_image.getCPtr(image));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static sp_error sp_image_add_ref(SWIGTYPE_p_sp_image image) {
    return sp_error.swigToEnum(spotifyJNI.sp_image_add_ref(SWIGTYPE_p_sp_image.getCPtr(image)));
  }

  public static sp_error sp_image_release(SWIGTYPE_p_sp_image image) {
    return sp_error.swigToEnum(spotifyJNI.sp_image_release(SWIGTYPE_p_sp_image.getCPtr(image)));
  }

  public static SWIGTYPE_p_sp_search sp_search_create(SWIGTYPE_p_sp_session session, String query, int track_offset, int track_count, int album_offset, int album_count, int artist_offset, int artist_count, int playlist_offset, int playlist_count, sp_search_type search_type, SWIGTYPE_p_f_p_struct_sp_search_p_void__void callback, SWIGTYPE_p_void userdata) {
    long cPtr = spotifyJNI.sp_search_create(SWIGTYPE_p_sp_session.getCPtr(session), query, track_offset, track_count, album_offset, album_count, artist_offset, artist_count, playlist_offset, playlist_count, search_type.swigValue(), SWIGTYPE_p_f_p_struct_sp_search_p_void__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(userdata));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_search(cPtr, false);
  }

  public static boolean sp_search_is_loaded(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_is_loaded(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static sp_error sp_search_error(SWIGTYPE_p_sp_search search) {
    return sp_error.swigToEnum(spotifyJNI.sp_search_error(SWIGTYPE_p_sp_search.getCPtr(search)));
  }

  public static int sp_search_num_tracks(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_num_tracks(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static SWIGTYPE_p_sp_track sp_search_track(SWIGTYPE_p_sp_search search, int index) {
    long cPtr = spotifyJNI.sp_search_track(SWIGTYPE_p_sp_search.getCPtr(search), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static int sp_search_num_albums(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_num_albums(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static SWIGTYPE_p_sp_album sp_search_album(SWIGTYPE_p_sp_search search, int index) {
    long cPtr = spotifyJNI.sp_search_album(SWIGTYPE_p_sp_search.getCPtr(search), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_album(cPtr, false);
  }

  public static int sp_search_num_playlists(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_num_playlists(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static SWIGTYPE_p_sp_playlist sp_search_playlist(SWIGTYPE_p_sp_search search, int index) {
    long cPtr = spotifyJNI.sp_search_playlist(SWIGTYPE_p_sp_search.getCPtr(search), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlist(cPtr, false);
  }

  public static String sp_search_playlist_name(SWIGTYPE_p_sp_search search, int index) {
    return spotifyJNI.sp_search_playlist_name(SWIGTYPE_p_sp_search.getCPtr(search), index);
  }

  public static String sp_search_playlist_uri(SWIGTYPE_p_sp_search search, int index) {
    return spotifyJNI.sp_search_playlist_uri(SWIGTYPE_p_sp_search.getCPtr(search), index);
  }

  public static String sp_search_playlist_image_uri(SWIGTYPE_p_sp_search search, int index) {
    return spotifyJNI.sp_search_playlist_image_uri(SWIGTYPE_p_sp_search.getCPtr(search), index);
  }

  public static int sp_search_num_artists(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_num_artists(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static SWIGTYPE_p_sp_artist sp_search_artist(SWIGTYPE_p_sp_search search, int index) {
    long cPtr = spotifyJNI.sp_search_artist(SWIGTYPE_p_sp_search.getCPtr(search), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_artist(cPtr, false);
  }

  public static String sp_search_query(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_query(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static String sp_search_did_you_mean(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_did_you_mean(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static int sp_search_total_tracks(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_total_tracks(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static int sp_search_total_albums(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_total_albums(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static int sp_search_total_artists(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_total_artists(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static int sp_search_total_playlists(SWIGTYPE_p_sp_search search) {
    return spotifyJNI.sp_search_total_playlists(SWIGTYPE_p_sp_search.getCPtr(search));
  }

  public static sp_error sp_search_add_ref(SWIGTYPE_p_sp_search search) {
    return sp_error.swigToEnum(spotifyJNI.sp_search_add_ref(SWIGTYPE_p_sp_search.getCPtr(search)));
  }

  public static sp_error sp_search_release(SWIGTYPE_p_sp_search search) {
    return sp_error.swigToEnum(spotifyJNI.sp_search_release(SWIGTYPE_p_sp_search.getCPtr(search)));
  }

  public static boolean sp_playlist_is_loaded(SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlist_is_loaded(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static sp_error sp_playlist_add_callbacks(SWIGTYPE_p_sp_playlist playlist, sp_playlist_callbacks callbacks, SWIGTYPE_p_void userdata) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_add_callbacks(SWIGTYPE_p_sp_playlist.getCPtr(playlist), sp_playlist_callbacks.getCPtr(callbacks), callbacks, SWIGTYPE_p_void.getCPtr(userdata)));
  }

  public static sp_error sp_playlist_remove_callbacks(SWIGTYPE_p_sp_playlist playlist, sp_playlist_callbacks callbacks, SWIGTYPE_p_void userdata) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_remove_callbacks(SWIGTYPE_p_sp_playlist.getCPtr(playlist), sp_playlist_callbacks.getCPtr(callbacks), callbacks, SWIGTYPE_p_void.getCPtr(userdata)));
  }

  public static int sp_playlist_num_tracks(SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlist_num_tracks(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static SWIGTYPE_p_sp_track sp_playlist_track(SWIGTYPE_p_sp_playlist playlist, int index) {
    long cPtr = spotifyJNI.sp_playlist_track(SWIGTYPE_p_sp_playlist.getCPtr(playlist), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static int sp_playlist_track_create_time(SWIGTYPE_p_sp_playlist playlist, int index) {
    return spotifyJNI.sp_playlist_track_create_time(SWIGTYPE_p_sp_playlist.getCPtr(playlist), index);
  }

  public static SWIGTYPE_p_sp_user sp_playlist_track_creator(SWIGTYPE_p_sp_playlist playlist, int index) {
    long cPtr = spotifyJNI.sp_playlist_track_creator(SWIGTYPE_p_sp_playlist.getCPtr(playlist), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_user(cPtr, false);
  }

  public static boolean sp_playlist_track_seen(SWIGTYPE_p_sp_playlist playlist, int index) {
    return spotifyJNI.sp_playlist_track_seen(SWIGTYPE_p_sp_playlist.getCPtr(playlist), index);
  }

  public static sp_error sp_playlist_track_set_seen(SWIGTYPE_p_sp_playlist playlist, int index, boolean seen) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_track_set_seen(SWIGTYPE_p_sp_playlist.getCPtr(playlist), index, seen));
  }

  public static String sp_playlist_track_message(SWIGTYPE_p_sp_playlist playlist, int index) {
    return spotifyJNI.sp_playlist_track_message(SWIGTYPE_p_sp_playlist.getCPtr(playlist), index);
  }

  public static String sp_playlist_name(SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlist_name(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static sp_error sp_playlist_rename(SWIGTYPE_p_sp_playlist playlist, String new_name) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_rename(SWIGTYPE_p_sp_playlist.getCPtr(playlist), new_name));
  }

  public static SWIGTYPE_p_sp_user sp_playlist_owner(SWIGTYPE_p_sp_playlist playlist) {
    long cPtr = spotifyJNI.sp_playlist_owner(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_user(cPtr, false);
  }

  public static boolean sp_playlist_is_collaborative(SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlist_is_collaborative(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static sp_error sp_playlist_set_collaborative(SWIGTYPE_p_sp_playlist playlist, boolean collaborative) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_set_collaborative(SWIGTYPE_p_sp_playlist.getCPtr(playlist), collaborative));
  }

  public static sp_error sp_playlist_set_autolink_tracks(SWIGTYPE_p_sp_playlist playlist, boolean link) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_set_autolink_tracks(SWIGTYPE_p_sp_playlist.getCPtr(playlist), link));
  }

  public static String sp_playlist_get_description(SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlist_get_description(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static boolean sp_playlist_get_image(SWIGTYPE_p_sp_playlist playlist, SWIGTYPE_p_unsigned_char image) {
    return spotifyJNI.sp_playlist_get_image(SWIGTYPE_p_sp_playlist.getCPtr(playlist), SWIGTYPE_p_unsigned_char.getCPtr(image));
  }

  public static boolean sp_playlist_has_pending_changes(SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlist_has_pending_changes(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static sp_error sp_playlist_add_tracks(SWIGTYPE_p_sp_playlist playlist, SWIGTYPE_p_p_sp_track tracks, int num_tracks, int position, SWIGTYPE_p_sp_session session) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_add_tracks(SWIGTYPE_p_sp_playlist.getCPtr(playlist), SWIGTYPE_p_p_sp_track.getCPtr(tracks), num_tracks, position, SWIGTYPE_p_sp_session.getCPtr(session)));
  }

  public static sp_error sp_playlist_remove_tracks(SWIGTYPE_p_sp_playlist playlist, SWIGTYPE_p_int tracks, int num_tracks) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_remove_tracks(SWIGTYPE_p_sp_playlist.getCPtr(playlist), SWIGTYPE_p_int.getCPtr(tracks), num_tracks));
  }

  public static sp_error sp_playlist_reorder_tracks(SWIGTYPE_p_sp_playlist playlist, SWIGTYPE_p_int tracks, int num_tracks, int new_position) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_reorder_tracks(SWIGTYPE_p_sp_playlist.getCPtr(playlist), SWIGTYPE_p_int.getCPtr(tracks), num_tracks, new_position));
  }

  public static long sp_playlist_num_subscribers(SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlist_num_subscribers(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static sp_subscribers sp_playlist_subscribers(SWIGTYPE_p_sp_playlist playlist) {
    long cPtr = spotifyJNI.sp_playlist_subscribers(SWIGTYPE_p_sp_playlist.getCPtr(playlist));
    return (cPtr == 0) ? null : new sp_subscribers(cPtr, false);
  }

  public static sp_error sp_playlist_subscribers_free(sp_subscribers subscribers) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_subscribers_free(sp_subscribers.getCPtr(subscribers), subscribers));
  }

  public static sp_error sp_playlist_update_subscribers(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_playlist playlist) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_update_subscribers(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_playlist.getCPtr(playlist)));
  }

  public static boolean sp_playlist_is_in_ram(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlist_is_in_ram(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static sp_error sp_playlist_set_in_ram(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_playlist playlist, boolean in_ram) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_set_in_ram(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_playlist.getCPtr(playlist), in_ram));
  }

  public static SWIGTYPE_p_sp_playlist sp_playlist_create(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_link link) {
    long cPtr = spotifyJNI.sp_playlist_create(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_link.getCPtr(link));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlist(cPtr, false);
  }

  public static sp_error sp_playlist_set_offline_mode(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_playlist playlist, boolean offline) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_set_offline_mode(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_playlist.getCPtr(playlist), offline));
  }

  public static sp_playlist_offline_status sp_playlist_get_offline_status(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_playlist playlist) {
    return sp_playlist_offline_status.swigToEnum(spotifyJNI.sp_playlist_get_offline_status(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_playlist.getCPtr(playlist)));
  }

  public static int sp_playlist_get_offline_download_completed(SWIGTYPE_p_sp_session session, SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlist_get_offline_download_completed(SWIGTYPE_p_sp_session.getCPtr(session), SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static sp_error sp_playlist_add_ref(SWIGTYPE_p_sp_playlist playlist) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_add_ref(SWIGTYPE_p_sp_playlist.getCPtr(playlist)));
  }

  public static sp_error sp_playlist_release(SWIGTYPE_p_sp_playlist playlist) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlist_release(SWIGTYPE_p_sp_playlist.getCPtr(playlist)));
  }

  public static sp_error sp_playlistcontainer_add_callbacks(SWIGTYPE_p_sp_playlistcontainer pc, sp_playlistcontainer_callbacks callbacks, SWIGTYPE_p_void userdata) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlistcontainer_add_callbacks(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), sp_playlistcontainer_callbacks.getCPtr(callbacks), callbacks, SWIGTYPE_p_void.getCPtr(userdata)));
  }

  public static sp_error sp_playlistcontainer_remove_callbacks(SWIGTYPE_p_sp_playlistcontainer pc, sp_playlistcontainer_callbacks callbacks, SWIGTYPE_p_void userdata) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlistcontainer_remove_callbacks(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), sp_playlistcontainer_callbacks.getCPtr(callbacks), callbacks, SWIGTYPE_p_void.getCPtr(userdata)));
  }

  public static int sp_playlistcontainer_num_playlists(SWIGTYPE_p_sp_playlistcontainer pc) {
    return spotifyJNI.sp_playlistcontainer_num_playlists(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc));
  }

  public static boolean sp_playlistcontainer_is_loaded(SWIGTYPE_p_sp_playlistcontainer pc) {
    return spotifyJNI.sp_playlistcontainer_is_loaded(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc));
  }

  public static SWIGTYPE_p_sp_playlist sp_playlistcontainer_playlist(SWIGTYPE_p_sp_playlistcontainer pc, int index) {
    long cPtr = spotifyJNI.sp_playlistcontainer_playlist(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlist(cPtr, false);
  }

  public static sp_playlist_type sp_playlistcontainer_playlist_type(SWIGTYPE_p_sp_playlistcontainer pc, int index) {
    return sp_playlist_type.swigToEnum(spotifyJNI.sp_playlistcontainer_playlist_type(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), index));
  }

  public static sp_error sp_playlistcontainer_playlist_folder_name(SWIGTYPE_p_sp_playlistcontainer pc, int index, String buffer, int buffer_size) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlistcontainer_playlist_folder_name(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), index, buffer, buffer_size));
  }

  public static SWIGTYPE_p_uint64_t sp_playlistcontainer_playlist_folder_id(SWIGTYPE_p_sp_playlistcontainer pc, int index) {
    return new SWIGTYPE_p_uint64_t(spotifyJNI.sp_playlistcontainer_playlist_folder_id(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), index), true);
  }

  public static SWIGTYPE_p_sp_playlist sp_playlistcontainer_add_new_playlist(SWIGTYPE_p_sp_playlistcontainer pc, String name) {
    long cPtr = spotifyJNI.sp_playlistcontainer_add_new_playlist(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), name);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlist(cPtr, false);
  }

  public static SWIGTYPE_p_sp_playlist sp_playlistcontainer_add_playlist(SWIGTYPE_p_sp_playlistcontainer pc, SWIGTYPE_p_sp_link link) {
    long cPtr = spotifyJNI.sp_playlistcontainer_add_playlist(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), SWIGTYPE_p_sp_link.getCPtr(link));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_playlist(cPtr, false);
  }

  public static sp_error sp_playlistcontainer_remove_playlist(SWIGTYPE_p_sp_playlistcontainer pc, int index) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlistcontainer_remove_playlist(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), index));
  }

  public static sp_error sp_playlistcontainer_move_playlist(SWIGTYPE_p_sp_playlistcontainer pc, int index, int new_position, boolean dry_run) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlistcontainer_move_playlist(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), index, new_position, dry_run));
  }

  public static sp_error sp_playlistcontainer_add_folder(SWIGTYPE_p_sp_playlistcontainer pc, int index, String name) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlistcontainer_add_folder(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), index, name));
  }

  public static SWIGTYPE_p_sp_user sp_playlistcontainer_owner(SWIGTYPE_p_sp_playlistcontainer pc) {
    long cPtr = spotifyJNI.sp_playlistcontainer_owner(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_user(cPtr, false);
  }

  public static sp_error sp_playlistcontainer_add_ref(SWIGTYPE_p_sp_playlistcontainer pc) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlistcontainer_add_ref(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc)));
  }

  public static sp_error sp_playlistcontainer_release(SWIGTYPE_p_sp_playlistcontainer pc) {
    return sp_error.swigToEnum(spotifyJNI.sp_playlistcontainer_release(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc)));
  }

  public static int sp_playlistcontainer_get_unseen_tracks(SWIGTYPE_p_sp_playlistcontainer pc, SWIGTYPE_p_sp_playlist playlist, SWIGTYPE_p_p_sp_track tracks, int num_tracks) {
    return spotifyJNI.sp_playlistcontainer_get_unseen_tracks(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), SWIGTYPE_p_sp_playlist.getCPtr(playlist), SWIGTYPE_p_p_sp_track.getCPtr(tracks), num_tracks);
  }

  public static int sp_playlistcontainer_clear_unseen_tracks(SWIGTYPE_p_sp_playlistcontainer pc, SWIGTYPE_p_sp_playlist playlist) {
    return spotifyJNI.sp_playlistcontainer_clear_unseen_tracks(SWIGTYPE_p_sp_playlistcontainer.getCPtr(pc), SWIGTYPE_p_sp_playlist.getCPtr(playlist));
  }

  public static String sp_user_canonical_name(SWIGTYPE_p_sp_user user) {
    return spotifyJNI.sp_user_canonical_name(SWIGTYPE_p_sp_user.getCPtr(user));
  }

  public static String sp_user_display_name(SWIGTYPE_p_sp_user user) {
    return spotifyJNI.sp_user_display_name(SWIGTYPE_p_sp_user.getCPtr(user));
  }

  public static boolean sp_user_is_loaded(SWIGTYPE_p_sp_user user) {
    return spotifyJNI.sp_user_is_loaded(SWIGTYPE_p_sp_user.getCPtr(user));
  }

  public static sp_error sp_user_add_ref(SWIGTYPE_p_sp_user user) {
    return sp_error.swigToEnum(spotifyJNI.sp_user_add_ref(SWIGTYPE_p_sp_user.getCPtr(user)));
  }

  public static sp_error sp_user_release(SWIGTYPE_p_sp_user user) {
    return sp_error.swigToEnum(spotifyJNI.sp_user_release(SWIGTYPE_p_sp_user.getCPtr(user)));
  }

  public static SWIGTYPE_p_sp_toplistbrowse sp_toplistbrowse_create(SWIGTYPE_p_sp_session session, sp_toplisttype type, sp_toplistregion region, String username, SWIGTYPE_p_f_p_struct_sp_toplistbrowse_p_void__void callback, SWIGTYPE_p_void userdata) {
    long cPtr = spotifyJNI.sp_toplistbrowse_create(SWIGTYPE_p_sp_session.getCPtr(session), type.swigValue(), region.swigValue(), username, SWIGTYPE_p_f_p_struct_sp_toplistbrowse_p_void__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(userdata));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_toplistbrowse(cPtr, false);
  }

  public static boolean sp_toplistbrowse_is_loaded(SWIGTYPE_p_sp_toplistbrowse tlb) {
    return spotifyJNI.sp_toplistbrowse_is_loaded(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb));
  }

  public static sp_error sp_toplistbrowse_error(SWIGTYPE_p_sp_toplistbrowse tlb) {
    return sp_error.swigToEnum(spotifyJNI.sp_toplistbrowse_error(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb)));
  }

  public static sp_error sp_toplistbrowse_add_ref(SWIGTYPE_p_sp_toplistbrowse tlb) {
    return sp_error.swigToEnum(spotifyJNI.sp_toplistbrowse_add_ref(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb)));
  }

  public static sp_error sp_toplistbrowse_release(SWIGTYPE_p_sp_toplistbrowse tlb) {
    return sp_error.swigToEnum(spotifyJNI.sp_toplistbrowse_release(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb)));
  }

  public static int sp_toplistbrowse_num_artists(SWIGTYPE_p_sp_toplistbrowse tlb) {
    return spotifyJNI.sp_toplistbrowse_num_artists(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb));
  }

  public static SWIGTYPE_p_sp_artist sp_toplistbrowse_artist(SWIGTYPE_p_sp_toplistbrowse tlb, int index) {
    long cPtr = spotifyJNI.sp_toplistbrowse_artist(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_artist(cPtr, false);
  }

  public static int sp_toplistbrowse_num_albums(SWIGTYPE_p_sp_toplistbrowse tlb) {
    return spotifyJNI.sp_toplistbrowse_num_albums(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb));
  }

  public static SWIGTYPE_p_sp_album sp_toplistbrowse_album(SWIGTYPE_p_sp_toplistbrowse tlb, int index) {
    long cPtr = spotifyJNI.sp_toplistbrowse_album(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_album(cPtr, false);
  }

  public static int sp_toplistbrowse_num_tracks(SWIGTYPE_p_sp_toplistbrowse tlb) {
    return spotifyJNI.sp_toplistbrowse_num_tracks(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb));
  }

  public static SWIGTYPE_p_sp_track sp_toplistbrowse_track(SWIGTYPE_p_sp_toplistbrowse tlb, int index) {
    long cPtr = spotifyJNI.sp_toplistbrowse_track(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_track(cPtr, false);
  }

  public static int sp_toplistbrowse_backend_request_duration(SWIGTYPE_p_sp_toplistbrowse tlb) {
    return spotifyJNI.sp_toplistbrowse_backend_request_duration(SWIGTYPE_p_sp_toplistbrowse.getCPtr(tlb));
  }

  public static SWIGTYPE_p_sp_inbox sp_inbox_post_tracks(SWIGTYPE_p_sp_session session, String user, SWIGTYPE_p_p_sp_track tracks, int num_tracks, String message, SWIGTYPE_p_f_p_struct_sp_inbox_p_void__void callback, SWIGTYPE_p_void userdata) {
    long cPtr = spotifyJNI.sp_inbox_post_tracks(SWIGTYPE_p_sp_session.getCPtr(session), user, SWIGTYPE_p_p_sp_track.getCPtr(tracks), num_tracks, message, SWIGTYPE_p_f_p_struct_sp_inbox_p_void__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(userdata));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sp_inbox(cPtr, false);
  }

  public static sp_error sp_inbox_error(SWIGTYPE_p_sp_inbox inbox) {
    return sp_error.swigToEnum(spotifyJNI.sp_inbox_error(SWIGTYPE_p_sp_inbox.getCPtr(inbox)));
  }

  public static sp_error sp_inbox_add_ref(SWIGTYPE_p_sp_inbox inbox) {
    return sp_error.swigToEnum(spotifyJNI.sp_inbox_add_ref(SWIGTYPE_p_sp_inbox.getCPtr(inbox)));
  }

  public static sp_error sp_inbox_release(SWIGTYPE_p_sp_inbox inbox) {
    return sp_error.swigToEnum(spotifyJNI.sp_inbox_release(SWIGTYPE_p_sp_inbox.getCPtr(inbox)));
  }

  public static String sp_build_id() {
    return spotifyJNI.sp_build_id();
  }

}
