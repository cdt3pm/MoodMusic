/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cs4720.moodmusic;

public final class sp_linktype {
  public final static sp_linktype SP_LINKTYPE_INVALID = new sp_linktype("SP_LINKTYPE_INVALID", spotifyJNI.SP_LINKTYPE_INVALID_get());
  public final static sp_linktype SP_LINKTYPE_TRACK = new sp_linktype("SP_LINKTYPE_TRACK", spotifyJNI.SP_LINKTYPE_TRACK_get());
  public final static sp_linktype SP_LINKTYPE_ALBUM = new sp_linktype("SP_LINKTYPE_ALBUM", spotifyJNI.SP_LINKTYPE_ALBUM_get());
  public final static sp_linktype SP_LINKTYPE_ARTIST = new sp_linktype("SP_LINKTYPE_ARTIST", spotifyJNI.SP_LINKTYPE_ARTIST_get());
  public final static sp_linktype SP_LINKTYPE_SEARCH = new sp_linktype("SP_LINKTYPE_SEARCH", spotifyJNI.SP_LINKTYPE_SEARCH_get());
  public final static sp_linktype SP_LINKTYPE_PLAYLIST = new sp_linktype("SP_LINKTYPE_PLAYLIST", spotifyJNI.SP_LINKTYPE_PLAYLIST_get());
  public final static sp_linktype SP_LINKTYPE_PROFILE = new sp_linktype("SP_LINKTYPE_PROFILE", spotifyJNI.SP_LINKTYPE_PROFILE_get());
  public final static sp_linktype SP_LINKTYPE_STARRED = new sp_linktype("SP_LINKTYPE_STARRED", spotifyJNI.SP_LINKTYPE_STARRED_get());
  public final static sp_linktype SP_LINKTYPE_LOCALTRACK = new sp_linktype("SP_LINKTYPE_LOCALTRACK", spotifyJNI.SP_LINKTYPE_LOCALTRACK_get());
  public final static sp_linktype SP_LINKTYPE_IMAGE = new sp_linktype("SP_LINKTYPE_IMAGE", spotifyJNI.SP_LINKTYPE_IMAGE_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static sp_linktype swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + sp_linktype.class + " with value " + swigValue);
  }

  private sp_linktype(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private sp_linktype(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private sp_linktype(String swigName, sp_linktype swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static sp_linktype[] swigValues = { SP_LINKTYPE_INVALID, SP_LINKTYPE_TRACK, SP_LINKTYPE_ALBUM, SP_LINKTYPE_ARTIST, SP_LINKTYPE_SEARCH, SP_LINKTYPE_PLAYLIST, SP_LINKTYPE_PROFILE, SP_LINKTYPE_STARRED, SP_LINKTYPE_LOCALTRACK, SP_LINKTYPE_IMAGE };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

